// Simple get info (ie Mail, Bank, and Password File) by 5n4k3
////////////////////////////////////////////////////////////////////

mx = include_lib("/lib/metaxploit.so")
if not mx then mx = include_lib(parent_path(program_path) + "/metaxploit.so")
if not mx then exit("Cannot find metaxploit.so")

ToFile = function(anyObject)
    if typeof(anyObject) == "shell" then return anyObject.host_computer.File("/")
    if typeof(anyObject) == "computer" then return anyObject.File("/")
    if typeof(anyObject) == "file" then
        while anyObject.parent
            anyObject = anyObject.parent
        end while
        return anyObject
    end if
    return null
end function

CheckUser = function(anyObject)
    rootFolder = ToFile(anyObject)
    for folder in rootFolder.get_folders
        if folder.name == "root" then
            if folder.has_permission("r") and folder.has_permission("w") and folder.has_permission("x") then
                return "root"
            end if
            break
        end if
    end for

    homeFolder = ToFile(anyObject)
    for folder in rootFolder.get_folders
        if folder.name == "home" then
            for userFolder in homeFolder.get_folders
                if userFolder.name != "guest" then
                    if userFolder.has_permission("r") and userFolder.has_permission("w") and userFolder.has_permission("x") then
                        return userFolder.name
                    end if
                end if
                break
            end for
            break
        end if
    end for

    return "guest"
end function

ScanLib = function(metalib = null, metax = null)
    if not metalib then return null
    if not metax then return null

    ret = {}
    ret.name = metalib.lib_name
    ret.version = metalib.version
    ret.memorys = {}
    descriptions= {}
    //ret.description = {}
    memorys = metax.scan(metalib)
    if typeof(memorys) != "list" or memorys.len == 0 then
        print("Scan completed: No issues detected.")
        return null
    end if

    //print("Scan completed: detected issues in " + memorys.len + " memory zones.")
    for memory in memorys
        ret.memorys[memory] = []
        descriptions[memory] = []
        data = metax.scan_address(metalib, memory).split("Unsafe check: ").replace(char(10), "")
        for line in data
            if line == data[0] then continue
                value = line[line.indexOf("<b>") + 3:line.indexOf("</b>")]
                description = line // Store the full description
                descriptions[memory].push(description) // Store the description
                ret.memorys[memory].push(value) // Store both value and description
                //print("##################################")
                //print("Memory address: " + memory)
                //print("-Vulnerability: " + value)
                //print("Description: " + line)
        end for
    end for
    ret.descriptions = descriptions // Store the descriptions in the return object
    return ret
end function

if params.len < 0 or params.len > 3 then exit("Usage: \n[address] [port] [(opt) lanip/password]. \nOR: \n[local] for local hack" )
if params[0] == "local" then
//Local hack
// Scans for local lib to hack
liblocal = user_input("Which library to attack? init, net, kernel >")
		liblocal = liblocal.replace("init", "/lib/init.so")
		liblocal = liblocal.replace("net", "/lib/net.so")
		liblocal = liblocal.replace("kernel", "/lib/kernel_module.so")
		print("Trying to fetch " + liblocal)

		// check if we have the target library

		file = get_shell.host_computer.File(liblocal)

if file == null then
    print((liblocal + " : " + "No such file or directory"))
else
    metaLib = mx.load(liblocal)
    // load our target library with file path as library to scan within metaxploit

    //passinject = user_input("Specify password for possible inject > ")

    quit = function(shell, pass)
        print("Password for root:")

        print(pass)
    end function

    shell = null
    pass = null
    memory = mx.scan(metaLib)
    injectArg = ""
    if params.len > 2 then injectArg = params[2]

    for mem in memory
        address = mx.scan_address(metaLib, mem).split("Unsafe check:")

        for add in address
            if add == address[0] then
                continue
            end if

            if shell and pass then
                quit(shell, pass)
            end if

            value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
            value = value.replace("\n", "")
            result = metaLib.overflow(mem, value, injectArg)

            if typeof(result) != "shell" and typeof(result) != "computer" then
                continue
            end if

            if typeof(result) == "shell" then
                shell = result
            end if

            if typeof(result) == "shell" then
                comp = result.host_computer
            end if

            if typeof(result) == "computer" then
                comp = result
            end if

            file = comp.File("/etc/passwd")

            if not file then
                continue
            end if

            cont = file.get_content

            if not cont then
                continue
            end if

            pass = cont.split("\n")[0]

            if shell then
                quit(shell, pass)
            end if

        end for
    end for

    if shell then
        shell.start_terminal
    end if

    exit(("Attack failed"))
end if
else if params.len == 1 then
    if not is_valid_ip(params[0]) then exit("invalid ip address")
    if not get_shell.host_computer.is_network_active then exit("No internet access.")
    
    ipAddress = params[0]
    isLanIp = is_lan_ip( ipAddress )
    
    if isLanIp then
       router = get_router;
    else 
       router = get_router( ipAddress )
    end if
    
    if router == null then exit("ip address not found")
    ports = null
    
    if not isLanIp then
       ports = router.used_ports
    else
       ports = router.device_ports(ipAddress)
    end if
    
    if ports == null then exit("ip address not found")
    if typeof(ports) == "string" then exit(ports)
          
    info = "PORT STATE SERVICE VERSION LAN"   
    print("\nMapping started at " + current_date)
    print("Interesting ports on " + params[0] + "\n")
    if(ports.len == 0) then exit("Scan finished. No open ports.")
    
    for port in ports
       service_info = router.port_info(port)
       lan_ips = port.get_lan_ip
       port_status = "open"
    
       if(port.is_closed and not isLanIp) then
          port_status = "closed"
       end if
       info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
    end for
    print(format_columns(info) + "\n")
else
// remote hack
targetIP = params[0]
if not is_valid_ip(targetIP) then targetIP = nslookup(targetIP)
if not is_valid_ip(targetIP) then exit("IP address invalid.")

targetPort = params[1].to_int
if typeof(targetPort) != "number" then exit("Port needs to be a number.")
if targetPort < 0 or targetPort > 65535 then exit("Port range is 0-65535.")

injectArg = ""
if params.len > 2 then injectArg = params[2]

ns = mx.net_use(targetIP, targetPort)
if not ns then exit("Cannot connect to net session.")
metaLib = ns.dump_lib
//print (metaLib)
memory = mx.scan(metaLib)
if not metaLib then exit("Cannot dump library.")
objects = []
injectArg = ""
if params.len > 2 then injectArg = params[2]
print("##################################")
print("           RESULTS:")
for mem in memory
    data = mx.scan_address(metaLib, mem).split("Unsafe check:")
    for line in data
        if line == data[0] then
            continue
        end if
        value = line[line.indexOf("<b>") + 3:line.indexOf("</b>")]
        value = value.replace("\n", "")
        print("##################################")
        print("Memory address: " + mem)
        print("-Vulnerability: " + value)
        print("Description: " + line)
        result = metaLib.overflow(mem, value, injectArg)
        if typeof(result) != "shell" and typeof(result) != "computer" and typeof(result) != "file" then continue
        objects.push(result)
    end for
end for

if objects.len == 0 then exit("No shells found.")

option = 0
while option <= 0 or option > objects.len
    info = "ID TYPE USER"
    i = 1
    for object in objects
        info = info + "\n" + str(i) + " " + typeof(object) + " " + CheckUser(object)
        i = i + 1
    end for
    print(format_columns(info) + "\n")

    option = user_input("Enter ID: ").to_int
    if typeof(option) != "number" then exit("Option ID out of range.")
end while

if option <= 0 or option > objects.len then exit("Option ID out of range.")
object = objects[option-1]

if typeof(object) == "shell" then
    object.start_terminal
else if typeof(object) == "computer" then
    homeFolder = object.File("/home")
    if not homeFolder then exit("Cannot find home directory.")

    result = null
    for userFolder in homeFolder.get_folders
        if userFolder.name != "guest" then
            for configFolder in userFolder.get_folders
                if configFolder.name == "Config" then
                    result = configFolder
                    break
                end if
            end for
        end if
    end for

    file = object.File("/etc/passwd")
    if file != null and file.has_permission("r") then
        print("Password file:\n" + file.get_content)
    end if

    print("Mail Accounts:")
    for file in result.get_files
        if not file.has_permission("r") then continue
        if file.name == "Mail.txt" then print(file.get_content)
    end for

    print("Bank Accounts:")
    for file in result.get_files
        if not file.has_permission("r") then continue
        if file.name == "Bank.txt" then print(file.get_content)
    end for
else if typeof(object) == "file" then
    rootFolder = object
    while rootFolder.parent
        rootFolder = rootFolder.parent
    end while

    result = null
    for folder in rootFolder.get_folders
        if folder.name == "home" then
            for userFolder in folder.get_folders
                if userFolder.name != "guest" then
                    for configFolder in userFolder.get_folders
                        if configFolder.name == "Config" then
                            result = configFolder
                            break
                        end if
                    end for
                end if
            end for
        end if
    end for

    filePasswd = null
    for folder in rootFolder.get_folders
        if folder.name == "etc" then
            for file in folder.get_files
                filePasswd = file
                break
            end for
        end if
    end for
    if filePasswd != null and filePasswd.has_permission("r") then
        print("Passwords:\n" + filePasswd.get_content + "\n")
    end if

    print("Mail Accounts:")
    for file in result.get_files
        if not file.has_permission("r") then continue
        if file.name == "Mail.txt" then print(file.get_content)
    end for

    print("Bank Accounts:")
    for file in result.get_files
        if not file.has_permission("r") then continue
        if file.name == "Bank.txt" then print(file.get_content)
    end for
end if
end if